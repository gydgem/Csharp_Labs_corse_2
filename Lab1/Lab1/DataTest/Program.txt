using System;
using System.Collections.Generic;
using System.IO;

namespace GeneticsProject
{
    public struct GeneticData
    {
        public string name; //protein name
        public string organism;
        public string formula; //formula
    }

    class Program
    { 
        static List<GeneticData> data = new List<GeneticData>();
        static int count = 1;
        static string GetFormula(string proteinName)
        {
            foreach (GeneticData item in data)
            {
                if (item.name.Equals(proteinName)) return item.formula;
            }
            return null;
        }
        static void ReadGeneticData(string filename)
        {
            StreamReader reader = new StreamReader(filename);
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                string[] fragments = line.Split('\t');
                GeneticData protein;
                protein.name = fragments[0];
                protein.organism = fragments[1];
                protein.formula = fragments[2];
                data.Add(protein);
                count++;
            }
            reader.Close();
        }
        static void ReadHandleCommands(string filename)
        {
            StreamReader reader = new StreamReader(filename);
            int counter = 0;
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine(); counter++;
                string[] command = line.Split('\t');
                if (command[0].Equals("search"))
                {
                    //001   search  SIIK
                    Console.WriteLine($"{counter.ToString("D3")}   {"search"}   {Decoding(command[1])}");
                    int index = Search(command[1]);
                    if (index != -1)
                        Console.WriteLine($"{data[index].organism}    {data[index].name}");
                    else
                        Console.WriteLine("NOT FOUND");
                    Console.WriteLine("================================================");
                }
                if (command[0].Equals("diff"))
                {

                }
                if (command[0].Equals("mode"))
                {

                }
            }
            reader.Close();
        }
        static bool IsValid(string formula)
        {
            List<char> letters = new List<char>() { 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y' };
            foreach (char ch in formula)
            {
                if (!letters.Contains(ch)) return false;
            }
            return true;
        }
        static string Encoding(string formula)
        {
            string encoded = String.Empty;
            for (int i = 0; i < formula.Length; i++)
            {
                char ch = formula[i];
                int count = 1;
                while (i < formula.Length-1 && formula[i + 1] == ch)
                {
                    count++;
                    i++;
                }
                if (count > 2) encoded = encoded + count + ch;
                if (count == 1) encoded = encoded + ch;
                if (count == 2) encoded = encoded + ch + ch;

            }
            return encoded;

        }
        static string Decoding(string formula)
        {
            string decoded = String.Empty;
            for(int i=0;i<formula.Length;i++)
            {
                if (char.IsDigit(formula[i]))
                {
                    char letter = formula[i + 1];
                    int conversion = formula[i] - '0';  
                    for (int j = 0; j < conversion-1; j++) decoded = decoded + letter;
                }
                else decoded = decoded + formula[i];
            }
            return decoded;
        }
        static int Search(string amino_acid)
        {
            //       FKIII                FK3I
            string decoded = Decoding(amino_acid);
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].formula.Contains(decoded)) return i;
            }
            return -1;              
        }
        static int Diff(string protein1, string protein2)
        {
            //Your code here
            //if protein1[i] != protein1[i] counter++;
            //return counter;
            return 0;
        }
        static void Mode()
        {
            
        }
        static void Main(string[] args)
        {

            Console.WriteLine(Encoding("AAAAAAAATATTTCGCTTTTCAAAAATTGTCAGATGAGAGAAAAAATAAAA"));
           // string formula2 =  Decoding("FK3I");
          //  ReadGeneticData("sequences.0.txt");
          //  Console.WriteLine("=============Search===================");
          //  ReadHandleCommands("commands.0.txt");
          //  Console.WriteLine("=============Get Formula of the Protein===================");
          //  string formula=GetFormula("6.8 kDa mitochondrial proteolipid");
           // if (formula != null) Console.WriteLine(formula);
        }
    }
}
